TEST CASE 3

import matplotlib.pyplot as plt
from sklearn.svm import LinearSVC
from sklearn.linear_model import Perceptron
from sklearn.neighbors import KNeighborsClassifier as knn
from scipy.spatial import distance


def euc(a, b):
    return distance.euclidean(a, b)


class ScrappyKNN():
    def fit(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train
        print("Training Data...")

    def predict(self, X_test):
        predictions = []
        for row in X_test:
            label = self.closest(row)
            # print row
            predictions.append(label)

        return predictions

    def closest(self, row):
        best_dist = euc(row, self.X_train[0])
        best_index = 0

        for i in range(1, len(self.X_train)):
            dist = euc(row, self.X_train[i])
            if dist < best_dist:
                best_dist = dist
                best_index = i
        return self.y_train[best_index]


from sklearn import datasets
iris = datasets.load_iris()

X = iris.data
y = iris.target

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.5)


#from sklearn.neighbors import KNeighborsClassifier

my_classifier = knn()

my_classifier.fit(X_train, y_train)

# print len(y_train)
xCoord = range(0, len(y_train))
# print X
plt.plot(xCoord, y_train)
plt.show()

predictions = my_classifier.predict(X_test)


sample = [[4.7, 3.9, 2.0, 0.5]]
print(my_classifier.predict(sample))
from sklearn.metrics import accuracy_score
print accuracy_score(y_test, predictions)
